#include <Adafruit_NeoPixel.h>
#include <Servo.h>

#ifdef __AVR__
  #include <avr/power.h>
#endif

int const sBox = 6; // 6 leds
int const mBox = 7; // 7 leds
int const lBox = 4; // 4 leds
int const xlBox = 5; // 5 leds
int const buttonPin = 2; // pin for the button
int const servoPin = 3;
int counter = 0;

// IMPORTANT
int const numBoxes = 7; // Number of individual boxes
int const servoDelay = 50;
int buttonCount = 0; // counter for how many times the button is pressed
  
// Parameter 1 = number of pixels in strip
// Parameter 2 = Arduino pin number (most are valid)

// XL-boxes, the "important boxes"
Adafruit_NeoPixel CD = Adafruit_NeoPixel(xlBox, 4, NEO_GRB + NEO_KHZ800);
Adafruit_NeoPixel FS = Adafruit_NeoPixel(xlBox, 5, NEO_GRB + NEO_KHZ800);
Adafruit_NeoPixel TC = Adafruit_NeoPixel(xlBox, 6, NEO_GRB + NEO_KHZ800);
Adafruit_NeoPixel AM = Adafruit_NeoPixel(xlBox, 7, NEO_GRB + NEO_KHZ800);

// Small, medium, large boxes, grouped together
Adafruit_NeoPixel S = Adafruit_NeoPixel(sBox, 8, NEO_GRB + NEO_KHZ800);
Adafruit_NeoPixel M = Adafruit_NeoPixel(mBox, 9, NEO_GRB + NEO_KHZ800);
Adafruit_NeoPixel L = Adafruit_NeoPixel(lBox, 10, NEO_GRB + NEO_KHZ800);

// Array of strips
Adafruit_NeoPixel *boxes[numBoxes] = {&FS, &TC, &AM, &CD, &S, &M, &L};

// The servo
Servo myServo;

void setup() {
  // Set button
  pinMode(buttonPin, INPUT);
  
  // Start all boxes
  for(int i=0; i<numBoxes; i++) {
    boxes[i]->begin();
    boxes[i]->show();
    if(boxes[i] == &CD || boxes[i] == &TC || boxes[i] == &AM || boxes[i] == &FS) {
      boxes[i]->setBrightness(255);
    }
    else {
      boxes[i]->setBrightness(125);
    }
  }
}

/*
 * The loop that will run on the arduino. Determines which demo to run depending on the button.
 */
void loop() {
  //demo();


  // Read the button
  if(digitalRead(buttonPin) == 1) {
    delay(200);
    buttonCount++;

    // Reset the button count if it gets over 10
    if(buttonCount > 10) {
      buttonCount = 0;
      counter = 0;
    }
  }
  
  // Determine which demo to run
  switch(buttonCount) {
    case 0: glowWhite(); break;
    case 1: turn45CD(); break;
    case 2: CDRamProblem(); break;
    case 3: turn90CDDiskProblem(); break;
    case 4: turn135CDTCTrafficProblem(); break;
    case 5: CDTCMRTrafficProblem(); break;
    case 6: otherBoxesHaveProblemsSameTime(); break;
    case 7: CDTurns180Red(); break;
    case 8: CDTurns180Red(); break;
    case 9: CDLightsYellow(); break;
    case 10: CDTurnsBack(); break;
    default: glowWhite(); break;
  }
  //sendTrafficVertical(200, 5, 5);
  //glowWhite();
  //oneBoxRed();
}

// All boxes glow white
void glowWhite() {
  for(int i=0; i<numBoxes; i++) {
    for(int j=0; j<boxes[i]->numPixels(); j++) {
      boxes[i]->setPixelColor(j,100,100,100);
      boxes[i]->show();
    }
  }
}

// Turn CD-box 45 degrees, everything still white
void turn45CD() {
  
  // Only do this function once
  if(counter == 0) {
    myServo.attach(servoPin);
    
    for (int p=180; p >= 135; p -= 1) {
      myServo.write(p);
      delay(servoDelay);
    }

    myServo.detach();
    counter++;
  }
}

/*
 * CD-box gets a ram problem and starts glowing purple (ram problem)
 */
void CDRamProblem() {

  // Light all CD's leds from white to purple
  for(int j=0; j<CD.numPixels(); j++) {
    CD.setPixelColor(j,255,0,255);
    CD.show();
  }
}

/* 
 * CD-box turns to 90 degrees and starts glowing green (disk problem)
 */
void turn90CDDiskProblem() {
    
  // Only do this function once
  if(counter == 1) {

    myServo.attach(servoPin);
    
    // Turn from 45 degrees to 90 degrees and fade to green
    for (int p=135; p >= 90; p -= 1) {
      myServo.write(p);
      delay(servoDelay);
    }
    myServo.detach();

    for(int j=0; j<CD.numPixels(); j++) {
      CD.setPixelColor(j, 0, 255, 30);
      CD.show();
    }

    counter++;
  }
}

/*
 * CD-box turns 135 degrees and starts sending blue signals to TC box in blue (traffic problem)
 */
void turn135CDTCTrafficProblem() {
  
  // Only do this function once
  if(counter == 2) {

    int del = 80;
    int t = 0;
  
    myServo.attach(servoPin);
    
    for (int p=90; p >= 45; p -= 1) {
      myServo.write(p);
      delay(servoDelay);
    }

    myServo.detach();

    // But light the leds repeatedly, in a pulsing fashion.
    // CD sends to TC
    while(t <= 1) { 
      for(int j=0; j<CD.numPixels(); j++) {
          CD.setPixelColor(j, 0,0,255);
          CD.show();
          delay(50+del);
      }
      // TC receives
      for(int j=0; j<TC.numPixels(); j++) {
          TC.setPixelColor(TC.numPixels()-j, 0,0,255);
          TC.show();
          delay(del);
      }
      // CD shuts
      for(int j=0; j<CD.numPixels(); j++) {
          CD.setPixelColor(j, 0,0,0);
          CD.show();
          delay(50+del);
      }
      // TC shuts
      for(int j=0; j<TC.numPixels(); j++) {
          TC.setPixelColor(TC.numPixels()-j, 0,0,0);
          TC.show();
          delay(del);
      }
      t++;
    }

    // Glow only blue
    for(int i=0; i<numBoxes; i++) {
      // Only TC and CD
      if(boxes[i] == &TC || boxes[i] == &CD) {
        for(int j=0; j<boxes[i]->numPixels(); j++) {
          boxes[i]->setPixelColor(j,0,50,255);
          boxes[i]->show();
        }
      }
    }
    counter++;
  }
}

/* 
 *  CD, TC and MR has traffic problems, TC sends to AM and CD in blue (traffic problem)
 */
void CDTCMRTrafficProblem() {
  
  if(counter == 3) {
    int t = 0;
    int del = 80;
    
    while(t <= 1) { 
        for(int j=0; j<CD.numPixels(); j++) {
            CD.setPixelColor(j, 0,0,255);
            CD.show();
            delay(50+del);
        }
        // TC and MR receives
        for(int j=0; j<TC.numPixels(); j++) {
            TC.setPixelColor(TC.numPixels()-j, 0,0,255);
            S.setPixelColor(TC.numPixels()-j, 0,0,255);
            TC.show();
            S.show();
            delay(del);
        }
      
        // CD shuts
        for(int j=0; j<CD.numPixels(); j++) {
            CD.setPixelColor(j, 0,0,0);
            CD.show();
            delay(50+del);
        }
        // TC and S shuts
        for(int j=0; j<TC.numPixels(); j++) {
            TC.setPixelColor(TC.numPixels()-j, 0,0,0);
            TC.show();
            S.setPixelColor(TC.numPixels()-j, 0,0,0);
            S.show();
            delay(del);
        }
      
        t++;
    }

    // Glow only blue
    for(int i=0; i<numBoxes; i++) {
      // Only TC and CD and S
      if(boxes[i] == &TC || boxes[i] == &CD || boxes[i] == &S) {
        for(int j=0; j<boxes[i]->numPixels(); j++) {
          boxes[i]->setPixelColor(j,0,50,255);
          boxes[i]->show();
        }
      }
    }
    counter++;
  }
}

void demo() {
  
 // if(counter == 0) {
    int t = 0;
    int del = 80;
    
    //while(t <= 5) { 
        for(int j=0; j<CD.numPixels(); j++) {
            CD.setPixelColor(j, 0,0,255);
            CD.show();
            delay(50+del);
        }
        // TC and MR receives
        for(int j=0; j<TC.numPixels(); j++) {
            TC.setPixelColor(TC.numPixels()-j, 0,0,255);
            S.setPixelColor(TC.numPixels()-j, 0,0,255);
            TC.show();
            S.show();
            delay(del);
        }
      
        // CD shuts
        for(int j=0; j<CD.numPixels(); j++) {
            CD.setPixelColor(j, 0,0,0);
            CD.show();
            delay(50+del);
        }
        // TC and S shuts
        for(int j=0; j<TC.numPixels(); j++) {
            TC.setPixelColor(TC.numPixels()-j, 0,0,0);
            TC.show();
            S.setPixelColor(TC.numPixels()-j, 0,0,0);
            S.show();
            delay(del);
        //}
      
      //  t++;
    //}
/*
    // Glow only blue
    for(int i=0; i<numBoxes; i++) {
      // Only TC and CD and S
      if(boxes[i] == &TC || boxes[i] == &CD || boxes[i] == &S) {
        for(int j=0; j<boxes[i]->numPixels(); j++) {
          boxes[i]->setPixelColor(j,0,50,255);
          boxes[i]->show();
        }
      }
    }
    counter++;
    */
  }
}

/*
 * Other boxes has the same problem
 */
void otherBoxesHaveProblemsSameTime() {
  
  for(int j=0; j<CD.numPixels(); j++) {
    CD.setPixelColor(j, 0,0,255);
    CD.show();
  }

  for(int j=0; j<AM.numPixels(); j++) {
    AM.setPixelColor(j, 0,255,255);
    AM.show();
  }

  for(int j=0; j<S.numPixels(); j++) {
    S.setPixelColor(j, 0,255,0);
    S.show();
  }

  for(int j=0; j<M.numPixels(); j++) {
    M.setPixelColor(j, 255,0,0);
    M.show();
  }
}

/*
 * Box shuts down completely
 */
void CDTurns180Red() {

    if(counter == 4) {
      glowWhite();
      int del = 80;
      int t = 0;
  
      myServo.attach(servoPin);

      int counter2 = 0;
      // p = 45
      for (int p=180; p >= 0; p -= 1) {
        
        if(counter2 == 0) {
          delay(3000);
          counter2++;
        }
        myServo.write(p);
        delay(servoDelay);
      }

      myServo.detach();    

      for(int j=0; j<CD.numPixels(); j++) {
        CD.setPixelColor(j, 255,0,0);
        CD.show();
      }
      counter++;
    }
}
 

/*
 * Some one's on the problem and CD turns yellow
 */
void CDLightsYellow() {
  for(int j=0; j<CD.numPixels(); j++) {
    CD.setPixelColor(j, 255,200,0);
    CD.show();
  }
}

/*
 * CD turns all the way back to the beginning
 */
void CDTurnsBack() {
  if(counter == 5) {
      int del = 80;
      int t = 0;
  
      myServo.attach(servoPin);
    
      for (int p=0; p <= 180; p += 1) {
        myServo.write(p);
        delay(servoDelay);
      }

      myServo.detach();
  
    for(int j=0; j<CD.numPixels(); j++) {
      CD.setPixelColor(j, 255,255,255);
      CD.show();
    }
    counter++;
  }
}

void shineWhite() {
  if(counter == 6) {
    for(int i=0; i<numBoxes; i++) {
      for(int j=0; j<boxes[i]->numPixels(); j++) {
        boxes[i]->setPixelColor(j,100,100,100);
        boxes[i]->show();
        delay(100);
      }
    }
    delay(200);

    glowWhite();
    
    counter++;
  }
}

/*
// Traffic send
void sendTrafficVertical(int brightness, int delaytime, int speedtime) {
  
  //Fade in
  for(int i=0; i<brightness; i=i + speedtime) {

     //update strip1
     for(int j=0; j<sBox; j++) {
       S.setPixelColor(j, S.Color(0,i,i));
       S.show();
       delay(delaytime);
     }
     // Wait for a bit to light up strip 2
     if(i > 30) { 
        for(int k=0; k<mBox; k++) {
          M.setPixelColor(k, M.Color(0, i-30, i-30));
          M.show();
        }
     }
     // Wait a bit longer to light up strip 3
     if(i > 60) {
        //update strip3
        for(int k=0; k<lBox; k++) {
          L.setPixelColor(k, L.Color(0, i-60, i-60));
          L.show();
        }
     }
     // Wait a bit longer to light up strip 3
     if(i > 80) {
        //update strip3
        for(int k=0; k<TC.numPixels(); k++) {
          TC.setPixelColor(k, TC.Color(0, i-60, i-60));
          TC.show();
        }
     }
     if(i > 90) {
        //update strip3
        for(int k=0; k<AM.numPixels(); k++) {
          AM.setPixelColor(k, AM.Color(0, i-60, i-60));
          AM.show();
        }
     }
     if(i > 100) {
        //update strip3
        for(int k=0; k<CD.numPixels(); k++) {
          CD.setPixelColor(k, CD.Color(0, i-60, i-60));
          CD.show();
        }
     }
     if(i > 110) {
        //update strip3
        for(int k=0; k<FS.numPixels(); k++) {
          FS.setPixelColor(k, FS.Color(0, i-60, i-60));
          FS.show();
        }
     }
     if(i > 120) {
        //update strip3
        for(int k=0; k<MR.numPixels(); k++) {
          MR.setPixelColor(k, MR.Color(0, i-60, i-60));
          MR.show();
        }
     }
  }

  // Fade out
  for(int i=0; i <= brightness; i=i+speedtime*1.5) {
     
     // Fade out strip 1
     for(int j=0; j<S.numPixels(); j++) {
       S.setPixelColor(j, S.Color(0,brightness-i,brightness-i));
       S.show();
       delay(delaytime);
     }
     // Wait a bit to fade out strip 2
     if(i > 30) {
        //update strip2 
        for(int k=0; k<M.numPixels(); k++) {
          M.setPixelColor(k, M.Color(0, brightness-i, brightness-i));
          M.show();
        }
     }
     // Wait a bit more to fade out strip 3
     if(i > 60) {
        //update strip2 
        for(int k=0; k<L.numPixels(); k++) {
          L.setPixelColor(k, L.Color(0, brightness-i, brightness-i));
          L.show();
        }
     }
     // Wait a bit longer to light up strip 3
     if(i > 80) {
        //update strip3
        for(int k=0; k<TC.numPixels(); k++) {
          TC.setPixelColor(k, L.Color(0, brightness-i, brightness-i));
          TC.show();
        }
     }
     
     
  }
}
*/

